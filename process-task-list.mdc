---
description: 
globs: 
alwaysApply: false
---
# Task List Management

Guidelines for managing task lists in markdown files to track progress on completing a PRD

## Task Implementation
- **One sub-task at a time:** Do **NOT** start the next sub‑task until you ask the user for permission and they say “yes” or "y"
- **Completion protocol:**  
  1. When you finish a **sub‑task**, immediately mark it as completed by changing `[ ]` to `[x]`.  
  2. If **all** subtasks underneath a parent task are now `[x]`, also mark the **parent task** as completed.  
- Stop after each sub‑task and wait for the user’s go‑ahead.
- **Respect dependencies:**  
  Before selecting a sub-task to work on, check the `## Dependencies` section of the task list.  
  You must **not begin any task or sub-task** whose listed dependencies have not all been marked `[x]`.  
  If any prerequisite task or sub-task is still open (`[ ]`), skip this item and choose a valid alternative.


## Task List Maintenance

1. **Update the task list as you work:**
   - Mark tasks and subtasks as completed (`[x]`) per the protocol above.
   - Add new tasks as they emerge.

2. **Maintain the “Relevant Files” section:**
   - List every file created or modified.
   - Give each file a one‑line description of its purpose.

## Task Journal Logging

Maintain a running journal log in a sidecar file (e.g., `tasklog-[feature].md`). The purpose of this is to provide a step-by-step log so that developers can trace what was done and why, giving them clear visibility into test coverage and validation quality as well making it easier to debug regressions. For each sub-task completed, append a new entry in this format:

```markdown
### ✅ Sub-task Completed: [Task ID and Name]

**Summary:**  
Briefly describe what was built, fixed, or changed.

**Relevant Files Modified:**  
- `src/components/ProfileForm.tsx` – Added upload status indicator  
- `hooks/useUpload.ts` – Wrapped mutation with `try/catch`

**Tests Performed:**  
- ✅ Manual test: Uploaded valid and invalid files  
- ✅ Unit test: `useUpload` returns error state correctly  

**Outcome:**  
Functionality verified manually. Upload indicator now triggers during async flow.

**Repeat this for each sub-task to build a full execution log.** 

## AI Instructions

When working with task lists, the AI must:

1. Regularly update the task list file after finishing any significant work.
2. Follow the completion protocol:
   - Mark each finished **sub‑task** `[x]`.
   - Mark the **parent task** `[x]` once **all** its subtasks are `[x]`.
3. Add newly discovered tasks.
4. Keep “Relevant Files” accurate and up to date.
5. Before starting work, check which sub‑task is next.
   - Only select a sub-task if all its dependencies (from the `## Dependencies` section) are marked `[x]`.
   - If multiple sub-tasks are eligible, choose the top-most one in the list.
6. If a sub-task is blocked by unmet dependencies, skip it and notify the user.  
   Ask if they want to:
   - Wait for the blocking task to complete
   - Manually override the dependency
   - Re-prioritize a different task

