version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: mentra-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-mentra_prod}
      POSTGRES_USER: ${POSTGRES_USER:-mentra_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - mentra-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-mentra_user} -d ${POSTGRES_DB:-mentra_prod}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # ChromaDB Vector Database
  chroma:
    image: ghcr.io/chroma-core/chroma:latest
    container_name: mentra-chroma-prod
    environment:
      - CHROMA_SERVER_AUTH_CREDENTIALS_PROVIDER=${CHROMA_AUTH_PROVIDER:-chromadb.auth.token.TokenAuthCredentialsProvider}
      - CHROMA_SERVER_AUTH_CREDENTIALS=${CHROMA_AUTH_TOKEN}
      - CHROMA_SERVER_AUTH_TOKEN_TRANSPORT_HEADER=X-Chroma-Token
    volumes:
      - chroma_data:/chroma/chroma
    ports:
      - "8000:8000"
    networks:
      - mentra-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # Redis (for session storage and caching)
  redis:
    image: redis:7-alpine
    container_name: mentra-redis-prod
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - mentra-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
      args:
        NODE_ENV: production
    container_name: mentra-backend-prod
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER:-mentra_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-mentra_prod}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      CHROMA_HOST: chroma
      CHROMA_PORT: 8000
      CHROMA_AUTH_TOKEN: ${CHROMA_AUTH_TOKEN}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-1d}
      FRONTEND_URL: ${FRONTEND_URL}
      AI_API_KEY: ${AI_API_KEY}
      AI_MODEL: ${AI_MODEL:-llama2}
      AI_ENDPOINT: ${AI_ENDPOINT}
      BCRYPT_ROUNDS: ${BCRYPT_ROUNDS:-14}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-50}
      LOG_LEVEL: ${LOG_LEVEL:-warn}
      ANALYTICS_ENABLED: ${ANALYTICS_ENABLED:-true}
      DATA_RETENTION_DAYS: ${DATA_RETENTION_DAYS:-365}
    ports:
      - "3001:3001"
    networks:
      - mentra-network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      chroma:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s

  # Frontend (served by Nginx)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        VITE_API_URL: ${BACKEND_URL:-http://localhost:3001}
        VITE_APP_ENV: production
    container_name: mentra-frontend-prod
    ports:
      - "80:80"
      - "443:443"
    networks:
      - mentra-network
    restart: unless-stopped
    depends_on:
      - backend
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: mentra-nginx-prod
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - mentra-network
    restart: unless-stopped
    depends_on:
      - backend
      - frontend
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

volumes:
  postgres_data:
    driver: local
  chroma_data:
    driver: local
  redis_data:
    driver: local

networks:
  mentra-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 